import { timestamp, files, shell } from '@sapper/service-worker';

const ASSETS = `cache${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
let to_cache = shell.concat(files);
if (process.env.NODE_ENV !== 'development') {
	to_cache = to_cache.map(item => `.${item}`);
}


self.addEventListener('install', event => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener('activate', event => {
	event.waitUntil(
		caches.keys().then(async keys => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});


self.addEventListener('fetch', event => {
	if(!(event.request.url.indexOf('http') === 0)){
    return;
  }
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const soloRed = fetch(event.request);
  event.respondWith(soloRed);
});
